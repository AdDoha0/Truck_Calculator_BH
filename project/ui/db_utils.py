"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –≤ Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
–°–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.
"""

import sys
from pathlib import Path
from typing import List, Optional, Dict, Any
import streamlit as st

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ë–î
sys.path.append(str(Path(__file__).parent.parent / "data" / "database"))

try:
    from database import get_db_session, ensure_db_exists
    from models import Base, Truck, FixedCostsTruck, FixedCostsCommon
except ImportError as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π –ë–î: {e}")
    st.stop()


def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        db_path = ensure_db_exists()
        return db_path
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None


def safe_db_operation(operation_func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ë–î"""
    def wrapper(*args, **kwargs):
        try:
            return operation_func(*args, **kwargs)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: {e}")
            return None
    return wrapper


# =============================================================================
# CRUD –¥–ª—è —Ç—Ä–∞–∫–æ–≤
# =============================================================================

@safe_db_operation
def create_truck(tractor_no: str) -> bool:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—Ä–∞–∫"""
    if not tractor_no or not tractor_no.strip():
        st.error("–ù–æ–º–µ—Ä —Ç—Ä–∞–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return False
        
    tractor_no = tractor_no.strip()
    
    with get_db_session() as session:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        existing = session.query(Truck).filter(Truck.tractor_no == tractor_no).first()
        if existing:
            st.error(f"–¢—Ä–∞–∫ {tractor_no} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
            
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—Ä–∞–∫–∞
        truck = Truck(tractor_no=tractor_no)
        session.add(truck)
        session.commit()
        st.success(f"‚úÖ –¢—Ä–∞–∫ {tractor_no} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
        return True


@safe_db_operation
def get_all_trucks() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç—Ä–∞–∫–æ–≤"""
    with get_db_session() as session:
        trucks = session.query(Truck).all()
        return [
            {
                "id": truck.id,
                "tractor_no": truck.tractor_no,
                "monthly_rows_count": len(truck.monthly_rows) if truck.monthly_rows else 0,
                "fixed_costs_count": len(truck.fixed_costs_items) if truck.fixed_costs_items else 0,
            }
            for truck in trucks
        ]


@safe_db_operation
def get_truck_by_id(truck_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–∫ –ø–æ ID"""
    with get_db_session() as session:
        truck = session.query(Truck).filter(Truck.id == truck_id).first()
        if truck:
            return {
                "id": truck.id,
                "tractor_no": truck.tractor_no,
                "monthly_rows_count": len(truck.monthly_rows) if truck.monthly_rows else 0,
                "fixed_costs_count": len(truck.fixed_costs_items) if truck.fixed_costs_items else 0,
            }
        return None


@safe_db_operation
def get_truck_by_tractor_no(tractor_no: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–∫ –ø–æ –Ω–æ–º–µ—Ä—É"""
    with get_db_session() as session:
        truck = session.query(Truck).filter(Truck.tractor_no == tractor_no).first()
        if truck:
            return {
                "id": truck.id,
                "tractor_no": truck.tractor_no,
                "monthly_rows_count": len(truck.monthly_rows) if truck.monthly_rows else 0,
                "fixed_costs_count": len(truck.fixed_costs_items) if truck.fixed_costs_items else 0,
            }
        return None


@safe_db_operation
def update_truck(truck_id: int, new_tractor_no: str) -> bool:
    """–û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç—Ä–∞–∫–∞"""
    if not new_tractor_no or not new_tractor_no.strip():
        st.error("–ù–æ–º–µ—Ä —Ç—Ä–∞–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return False
        
    new_tractor_no = new_tractor_no.strip()
    
    with get_db_session() as session:
        truck = session.query(Truck).filter(Truck.id == truck_id).first()
        if not truck:
            st.error("–¢—Ä–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —Ç—Ä–∞–∫)
        existing = session.query(Truck).filter(
            Truck.tractor_no == new_tractor_no,
            Truck.id != truck_id
        ).first()
        if existing:
            st.error(f"–¢—Ä–∞–∫ {new_tractor_no} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return False
            
        old_no = truck.tractor_no
        truck.tractor_no = new_tractor_no
        session.commit()
        st.success(f"‚úÖ –¢—Ä–∞–∫ {old_no} –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ {new_tractor_no}!")
        return True


@safe_db_operation
def delete_truck(truck_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–∫"""
    with get_db_session() as session:
        truck = session.query(Truck).filter(Truck.id == truck_id).first()
        if not truck:
            st.error("–¢—Ä–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        tractor_no = truck.tractor_no
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if truck.monthly_rows:
            st.error(f"–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞–∫ {tractor_no} - –µ—Å—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ({len(truck.monthly_rows)} —à—Ç.)")
            return False
            
        session.delete(truck)
        session.commit()
        st.success(f"üóëÔ∏è –¢—Ä–∞–∫ {tractor_no} —É–¥–∞–ª—ë–Ω!")
        return True


# =============================================================================
# CRUD –¥–ª—è –æ–±—â–∏—Ö —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
# =============================================================================

@safe_db_operation
def get_common_fixed_costs() -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±—â–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"""
    with get_db_session() as session:
        costs = session.query(FixedCostsCommon).first()
        if costs:
            return {
                "id": costs.id,
                "ifta": float(costs.ifta),
                "insurance": float(costs.insurance),
                "eld": float(costs.eld),
                "tablet": float(costs.tablet),
                "tolls": float(costs.tolls),
            }
        return {
            "id": None,
            "ifta": 0.0,
            "insurance": 0.0,
            "eld": 0.0,
            "tablet": 0.0,
            "tolls": 0.0,
        }


@safe_db_operation
def save_common_fixed_costs(ifta: float, insurance: float, eld: float, tablet: float, tolls: float) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—â–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã"""
    with get_db_session() as session:
        costs = session.query(FixedCostsCommon).first()
        
        if costs:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            costs.ifta = ifta
            costs.insurance = insurance
            costs.eld = eld
            costs.tablet = tablet
            costs.tolls = tolls
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            costs = FixedCostsCommon(
                ifta=ifta,
                insurance=insurance,
                eld=eld,
                tablet=tablet,
                tolls=tolls
            )
            session.add(costs)
            
        session.commit()
        st.success("‚úÖ –û–±—â–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return True


# =============================================================================
# CRUD –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø–æ —Ç—Ä–∞–∫–∞–º
# =============================================================================

@safe_db_operation
def get_truck_fixed_costs(truck_id: int) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—Ä–∞–∫–∞"""
    with get_db_session() as session:
        costs = session.query(FixedCostsTruck).filter(FixedCostsTruck.truck_id == truck_id).first()
        if costs:
            return {
                "id": costs.id,
                "truck_id": costs.truck_id,
                "truck_payment": float(costs.truck_payment),
                "trailer_payment": float(costs.trailer_payment),
                "physical_damage_insurance_truck": float(costs.physical_damage_insurance_truck),
                "physical_damage_insurance_trailer": float(costs.physical_damage_insurance_trailer),
            }
        return {
            "id": None,
            "truck_id": truck_id,
            "truck_payment": 0.0,
            "trailer_payment": 0.0,
            "physical_damage_insurance_truck": 0.0,
            "physical_damage_insurance_trailer": 0.0,
        }


@safe_db_operation
def save_truck_fixed_costs(truck_id: int, truck_payment: float, trailer_payment: float, 
                          pd_truck: float, pd_trailer: float) -> bool:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç—Ä–∞–∫–∞"""
    with get_db_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç—Ä–∞–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        truck = session.query(Truck).filter(Truck.id == truck_id).first()
        if not truck:
            st.error("–¢—Ä–∞–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        costs = session.query(FixedCostsTruck).filter(FixedCostsTruck.truck_id == truck_id).first()
        
        if costs:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            costs.truck_payment = truck_payment
            costs.trailer_payment = trailer_payment
            costs.physical_damage_insurance_truck = pd_truck
            costs.physical_damage_insurance_trailer = pd_trailer
        else:
            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            costs = FixedCostsTruck(
                truck_id=truck_id,
                truck_payment=truck_payment,
                trailer_payment=trailer_payment,
                physical_damage_insurance_truck=pd_truck,
                physical_damage_insurance_trailer=pd_trailer
            )
            session.add(costs)
            
        session.commit()
        st.success(f"‚úÖ –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç—Ä–∞–∫–∞ {truck.tractor_no} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        return True


@safe_db_operation
def delete_truck_fixed_costs(truck_id: int) -> bool:
    """–£–¥–∞–ª–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —Ç—Ä–∞–∫–∞"""
    with get_db_session() as session:
        costs = session.query(FixedCostsTruck).filter(FixedCostsTruck.truck_id == truck_id).first()
        if costs:
            session.delete(costs)
            session.commit()
            st.success("üóëÔ∏è –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —É–¥–∞–ª–µ–Ω—ã!")
            return True
        else:
            st.warning("–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç—Ä–∞–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False


def get_trucks_list_for_selectbox() -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–∫–æ–≤ –¥–ª—è selectbox'–∞"""
    trucks = get_all_trucks()
    if trucks:
        return [{"id": truck["id"], "label": truck["tractor_no"]} for truck in trucks]
    return []